package Test;
/**
 *两个对象，一个顾客，一个老板， 顾客来点包子吃，每次顾客来了，
 *老板要先问你想吃什么，顾客回答吃包子，老板就开始做包子，顾客进入睡眠，
 *老板要10秒做一个包子，做好后顾客开吃，吃30秒吃完，
 *吃完回答一声好吃，在20秒内随机有顾客加入，如果没有包子要做了 老板要停下来不运行进入睡眠
 * @author Pandamin
 */
public class Stro {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		store container=new store();
		new Boss(container).start();
		new Consumer(container).start();
	}
}
//老板
class Boss extends Thread{
	private boolean making = true;
	private int bcount = 0;
	private int allbcount;
	store container;
	public Boss(store container,int allbcount) {
		super();
		this.container = container;
		this.allbcount = allbcount;
	}
	public void run() {
		// TODO Auto-generated method stub
		super.run();
		while(making){
			System.out.println("做包子");
			container.push(new bun(bcount++));
			allbcount--;
			if(allbcount==0){
				System.out.println("今天的包子销售完了！");
				making = false;
			}
		}
	}
}
//顾客
class Consumer extends Thread{
	store container;	
	public Consumer(store container) {
		super();
		this.container = container;
	}
	public void run() {
		// TODO Auto-generated method stub
		super.run();
		for(int i=0;i<1000;i++){
			System.out.println("消费第"+container.pop().id+"个商品");
			container.push(new bun(i));
		}
	}
}
//缓冲区
class store{
	bun[] buns=new bun[10];
	int count=0;
	//存
	public synchronized void push(bun bun) {
		//何时生产 容器存在空间
		//存在空间可以生产
		//不能生产
		if(count==buns.length){
			try {
				this.wait();//线程阻塞，消费者通知生产解除
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		//存在空间，可以生产
		buns[count++]=bun;
		this.notifyAll();//唤醒
	}
	//取
	public synchronized bun pop() {
		//何时消费 容器中是否存在数据
		//没有数据 只有等待
		if(count==0){
			try {
				this.wait();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}//线程阻塞，生产者通知消费解除
		}
		//存在数据可以消费
		count--;
		//bun buns=buns[count];
		this.notifyAll();//唤醒
		//return buns;
		return null;
	}
}
//包子
class bun{
	int id;
	public bun(int id) {
		super();
		this.id = id;
	}
}