package GOF23.Prototype;

/**
 * 原型模式：
 *   - 通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式
 *   - java中的克隆技术，以某个对象为原型，复制出新的对象，显然，新的对象具备原型对象的特点
 *   - 优势有：效率高（直接克隆，避免了重新执行过程步骤）
 *   - 克隆类似于new,但是不同于new。new创建新对象属性采用的是默认值。克隆出的对象的属性值完全和原型对象相同。
 *   - 并且克隆出的新对象改变不会影响原型对象。然后，再修改克隆对象的值。
 * 原型模式实现：
 *   - Cloneable接口和clone方法
 *   - Prototype模式中实现起来最困难的地方就是内存复制操作，所幸在java中提供了clone()方法替我们做了绝大部分的事情。
 * 常见场景：
 *   - javascript继承prototype
 *   - 原型模式很少单独出现，一般是和工厂方法模式一起出现，通过clone的方法创建一个对象
 *   - 然后由工厂方法提供调用者。
 *     - spring中bean的创建实际上就是两种：单例模式和原型模式（原型模式需要工厂模式搭配起来）
 *
 */
public class prototype {
}
